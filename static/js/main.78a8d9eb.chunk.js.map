{"version":3,"sources":["App.module.css","components/ContactForm/ContactForm.module.css","components/FilterContacts/FilterContacts.module.css","Redux/Reducers.js","Redux/Store.js","Redux/Actions.js","Redux/Operations.js","Redux/Selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/FilterContacts/FilterContacts.js","App.js","reportWebVitals.js","index.js","components/ContactsList/ContactsList.module.css"],"names":["module","exports","INITIAL_STATE","error","createReducer","GET_CONTACTS_FAILURE","state","payload","ADD_CONTACTS_FAILURE","_","isLoading","GET_CONTACTS_REQUEST","GET_CONTACTS_SUCCESS","items","ADD_CONTACT_SUCCESS","DELETE_CONTACTS_SUCCESS","filter","id","FILTER_CONTACT","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contacts","contactsReduсer","store","configureStore","reducer","devTools","process","onChange","createAction","text","name","number","getContactsRequest","getContactsSuccess","getContactsFailure","addContactsRequest","addContactsSuccess","addContactsFailure","deleteContactsRequest","deleteContactsSuccess","deleteContactsFailure","getContacts","dispatch","getState","actions","axios","get","then","data","console","log","catch","message","notValidatedName","find","item","connect","useDispatch","useState","setName","setNumber","getItem","useSelector","className","s","form","onSubmit","event","preventDefault","alert","post","type","pattern","title","required","placeholder","value","target","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","onRemove","length","map","contact_span","button","onClick","delete","input","App","useEffect","container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78a8d9eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__atGgh\",\"title\":\"App_title__2juju\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3Qmnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FilterContacts_input__IgJzZ\"};","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst INITIAL_STATE = {\r\n  isLoading: false,\r\n  items: [],\r\n  error: '',\r\n};\r\n\r\nconst error = createReducer(INITIAL_STATE.error, {\r\n  GET_CONTACTS_FAILURE: (state, { payload }) => {\r\n    return payload;\r\n  },\r\n  ADD_CONTACTS_FAILURE: (_, { payload }) => {\r\n    return payload;\r\n  },\r\n});\r\n\r\nconst isLoading = createReducer(INITIAL_STATE.isLoading, {\r\n  GET_CONTACTS_REQUEST: () => {\r\n    return true;\r\n  },\r\n  GET_CONTACTS_SUCCESS: () => {\r\n    return false;\r\n  },\r\n  GET_CONTACTS_FAILURE: () => {\r\n    return false;\r\n  },\r\n});\r\n\r\nconst items = createReducer(INITIAL_STATE.items, {\r\n  GET_CONTACTS_SUCCESS: (_, { payload }) => {\r\n    return payload;\r\n  },\r\n  ADD_CONTACT_SUCCESS: (state, { payload }) => {\r\n    return [...state, payload];\r\n  },\r\n\r\n  DELETE_CONTACTS_SUCCESS: (state, { payload }) => {\r\n    return state.filter(({ id }) => id !== payload);\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  FILTER_CONTACT: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  isLoading,\r\n  items,\r\n  filter,\r\n  error,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReduсer from './Reducers';\r\n\r\n// const thunk = ({ dispatch, getState }) => next => action =>\r\n//   typeof action === 'function' ? action(dispatch, getState) : next(action);\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst rootReducer = combineReducers({ contacts: contactsReduсer });\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const store = createStore(\r\n//   rootReduсer,\r\n// );\r\n\r\n// export const persistor = persistStore(store);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n// import { v4 as uuid } from 'uuid';\r\n\r\nexport const onAdd = createAction('ADD_CONTACT', text => ({\r\n  payload: {\r\n    // id: uuid(),\r\n    name: text.name,\r\n    number: text.number,\r\n  },\r\n}));\r\nexport const deleteContacts = createAction('DELETE_CONTACT');\r\nexport const onChange = createAction('FILTER_CONTACT');\r\n\r\nexport const getContactsRequest = createAction('GET_CONTACTS_REQUEST');\r\nexport const getContactsSuccess = createAction('GET_CONTACTS_SUCCESS');\r\nexport const getContactsFailure = createAction('GET_CONTACTS_FAILURE');\r\n\r\nexport const addContactsRequest = createAction('ADD_CONTACTS_REQUEST');\r\nexport const addContactsSuccess = createAction('ADD_CONTACTS_SUCCESS');\r\nexport const addContactsFailure = createAction('ADD_CONTACTS_FAILURE');\r\n\r\nexport const deleteContactsRequest = createAction('DELETE_CONTACTS_REQUEST');\r\nexport const deleteContactsSuccess = createAction('DELETE_CONTACTS_SUCCESS');\r\nexport const deleteContactsFailure = createAction('DELETE_CONTACTS_FAILURE');\r\n","import axios from 'axios';\r\nimport * as actions from './Actions';\r\n\r\nexport const getContacts = () => (dispatch, getState) => {\r\n  dispatch(actions.getContactsRequest());\r\n  axios\r\n    .get('http://localhost:3000/items/')\r\n    .then(({ data }) => {\r\n      console.log(data);\r\n      dispatch(actions.getContactsSuccess(data));\r\n    })\r\n\r\n    .catch(error => dispatch(actions.getContactsFailure(error.message)));\r\n};\r\n\r\nexport const addContacts = payload => (dispatch, getState) => {\r\n  dispatch(actions.addContactsRequest());\r\n  axios\r\n    .post('http://localhost:3000/items/', payload)\r\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactsFailure(error.message)));\r\n};\r\n\r\nexport const deleteContacts = id => (dispatch, getState) => {\r\n  dispatch(actions.deleteContactsRequest());\r\n  axios\r\n    .delete(`http://localhost:3000/items/${id}`)\r\n    .then(() => dispatch(actions.deleteContactsSuccess(id)))\r\n    .catch(error => dispatch(actions.deleteContactsFailure(error.message)));\r\n};\r\n","export const notValidatedName = state => name =>\r\n  state.contacts.items?.find(item => item.name === name);\r\n","import { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector, connect } from 'react-redux';\r\nimport { addContacts, getContacts } from '../../Redux/Operations';\r\nimport { notValidatedName } from '../../Redux/Selectors';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nconst ContactForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // dispatch(getContacts());\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChangeNameForm = ({ target }) => {\r\n    setName(target.value);\r\n  };\r\n\r\n  const handleChangeNumberForm = ({ target }) => {\r\n    setNumber(target.value);\r\n  };\r\n\r\n  const getItem = useSelector(notValidatedName);\r\n\r\n  const handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    if (getItem(name)) {\r\n      alert('Contact is already exist');\r\n      return null;\r\n    } else {\r\n      dispatch(addContacts({ name, number }));\r\n      dispatch(getContacts());\r\n    }\r\n    setNumber('');\r\n    setName('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleFormSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        placeholder=\"Enter name\"\r\n        value={name}\r\n        onChange={handleChangeNameForm}\r\n      />\r\n\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n        required\r\n        placeholder=\"Enter phone number\"\r\n        value={number}\r\n        onChange={handleChangeNumberForm}\r\n      />\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default connect()(ContactForm);\r\n","import { connect, useDispatch } from 'react-redux';\r\n// import { onRemove } from '../../Redux/Actions';\r\nimport { deleteContacts } from '../../Redux/Operations';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactsList.module.css';\r\n\r\n// const ContactsListItem = ({ id, name, phone, onRemove }) => {\r\n//   return (\r\n//     <li className={s.contact}>\r\n//       {name}: {phone} <button onClick={() => onRemove(id)}>Delete</button>\r\n//     </li>\r\n//   );\r\n// };\r\n\r\nconst ContactsList = ({ items, onRemove }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  if (items.length === 0) return null;\r\n  return (\r\n    <ul>\r\n      {items.map(item => (\r\n        <li key={item.id} className={s.contact}>\r\n          <span className={s.contact_span}>{item.name}</span>{' '}\r\n          <span className={s.contact_span}>{item.number}</span>\r\n          <button\r\n            className={s.button}\r\n            onClick={() => dispatch(deleteContacts(item.id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst getVisibleContacts = (items, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  items: getVisibleContacts(items, filter),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactsList);\r\n\r\nContactsList.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { onChange } from '../../Redux/Actions';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FilterContacts.module.css';\r\n\r\nconst FilterContacts = ({ filter, onChange }) => {\r\n  return (\r\n    <input\r\n      className={s.input}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filter}\r\n      onChange={onChange}\r\n      // onChange={({ target }) => onChange(target.value)}\r\n      placeholder=\"Search contact\"\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: ({ target }) => dispatch(onChange(target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContacts);\r\n\r\nFilterContacts.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getContacts } from './Redux/Operations';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactsList from './components/ContactsList/ContactsList';\r\nimport FilterContacts from './components/FilterContacts/FilterContacts';\r\nimport s from './App.module.css';\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(getContacts()), [dispatch]);\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <h2 className={s.title}>Contact form</h2>\r\n\r\n      <ContactForm />\r\n\r\n      <h2 className={s.title}>Contact list</h2>\r\n\r\n      <FilterContacts />\r\n\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './Redux/Store';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconsole.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactsList_contact__2Mwfr\",\"contact_span\":\"ContactsList_contact_span__2mtpT\"};"],"sourceRoot":""}